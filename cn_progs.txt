#include<stdio.h>
#include<conio.h>
#include<string.h>
void main(){
    int a[20],b[30],i,j,k,count,n;
    printf("enter frame length : ");
    scanf("%d", &n);
    printf("enter input frame(0's & 1's only) : ");
    for(i=0;i<n;i++)
        scanf("%d", &a[i]);
    i=0;count=1;j=0;
    while(i<n){
        if(a[i]==1){
            b[j]=a[i];
            for(k=i+1;a[k]==1 && k<n && count<5;k++){
                j++;
                b[j]=a[k];
                count++;
                if(count==5){
                    j++;
                    b[j]=0;
                }
                i=k;
            }
        }
        else{
            b[j]=a[i];
        }
        i++;
        j++;
    }
    printf("after stuffing the frame is : ");
    for(i=0;i<j;i++)
        printf("%d ",b[i]);
    getch();
}

------------------------------------------------------------------------------------------------

#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>

void main(){
    int i,j,n,pos;
    char a[20],b[50],ch;
    printf("enter the data : ");
    scanf("%s",&a);
    n=strlen(a);
    printf("enter the position : ");
    scanf("%d",&pos);
    printf("enter the character : ");
    ch=getche();
    b[0]='d';
    b[1]='l';
    b[2]='e';
    b[3]='s';
    b[4]='t';
    b[5]='x';
    j=6;
    while(i<n){
        if(i==pos-1){
            b[j]='d';
            b[j+1]='l';
            b[j+2]='e';
            b[j+3]=ch;
            b[j+4]='d';
            b[j+5]='l';
            b[j+6]='e';
            j+=7;
        }
        if(a[i]=='d' && a[i+1]=='l' && a[i+2]=='e'){
            b[j]='d';
            b[j+1]='l';
            b[j+2]='e';
            j+=3;
        }
        b[j]=a[i];
        i++;
        j++;
    }
    b[j]='d';
    b[j+1]='l';
    b[j+2]='e';
    b[j+3]='e';
    b[j+4]='t';
    b[j+5]='x';
    b[j+6]='\0';
    printf("\nstuffed : %s",b);
    getch();
}

---------------------------------------------------------------------------

#include<stdio.h>
struct node{
    unsigned dist[20];
    unsigned from[20];
}rt[10];

int main(){
    int costmat[20][20];
    int nodes,i,j,k,count=0;
    printf("enter the number of nodes : ");
    scanf("%d", &nodes);
    printf("enter the cost matrix : \n");
    for(i=0;i<nodes;i++){
        for(j=0;j<nodes;j++){
            scanf("%d", &costmat[i][j]);
            costmat[i][i]=0;
            rt[i].dist[j]=costmat[i][j];
            rt[i].from[j]=j;
        }
    }
    do{
        count=0;
        for(i=0;i<nodes;i++)
            for(j=0;j<nodes;j++)
                for(k=0;k<nodes;k++)
                    if(rt[i].dist[j]>costmat[i][k]+rt[k].dist[j]){
                        rt[i].dist[j]=rt[i].dist[k]+rt[k].dist[j];
                        rt[i].from[j]=k;
                        count++;
                    }
    }while(count!=0);
    for(i=0;i<nodes;i++){
        printf("\n\nFor router %d\n", i+1);
        for(j=0;j<nodes;j++){
            printf("\t\nnode %d via %d Distance %d", j+1, rt[i].from[j]+1, rt[i].dist[j]);
        }
    }
    printf("\n\n");
    return 0;
}

--------------------------------------------------------------------------------------------------

#include<iostream>
#include<time.h>
#include<cstdlib>
#include<ctime>
#include<unistd.h>
using namespace std;

class timer{
    private:
        unsigned long begTime;
    public:
        void start(){
            begTime=clock();
        }
        unsigned long elapsedTime(){
            return((unsigned long)clock()-begTime)/CLOCKS_PER_SEC;
        }
        bool isTimeout(unsigned long seconds){
            return seconds >= elapsedTime();
        }
};

int main(){
    int frames[]={1,2,3,4,5,6,7,8,9,10,11};
    unsigned long seconds=5;
    srand(time(NULL));
    timer t;
    cout<<"sender has to send frames : ";
    for(int i=0;i<10;i++)
        cout<<frames[i]<<" ";
    cout<<endl;
    int count=0;
    bool delay=false;
    cout<<endl<<"sender\t\t\t\t\tReceiver"<<endl;
    do{
        bool timeout=false;
        cout<<"sending frame : "<<frames[count];
        cout.flush();
        cout<<"\t\t";
        t.start();
        if(rand()%2){
            int to=24600+rand()%(64000-24600)+1;
            for(int i=0;i<64000;i++)
                for(int j=0;j<to;j++){}
        }
        if(t.elapsedTime()<=seconds){
            cout<<"Received Frame : "<<frames[count]<<" ";
            if(delay){
                cout<<"Duplicate";
                delay=false;
            }
            cout<<endl;
            count++;
        }
        else{
            cout<<"---"<<endl;
            cout<<"Timeout"<<endl;
            timeout=true;
        }
        t.start();
        if(rand()%2 || !timeout){
            int to=24600+rand()%(64000-24600)+1;
            for(int i=0;i<64000;i++)
                for(int j=0;j<to;j++){}
            if(t.elapsedTime()>seconds){
                cout<<"Delayed Ack"<<endl;
                count--;
                delay=true;
            }
            else if(!timeout)
                cout<<"Acknowledgement : "<<frames[count]-1<<endl;
        }
    }while(count!=10);
    return 0;
}

--------------------------------------------------------------------------

#include<stdio.h>
#include<conio.h>

int main(){
    int data[50],div[16],rem[16];
    int datalen,divlen,i,j,k;
    int ch;
    printf("enter the data: ");
    i=0;
    while((ch=fgetc(stdin))!='\n'){
        if(ch=='1')
            data[i]=1;
        else    
            data[i]=0;
        i++;
    }
    datalen=i;
    printf("enter the divisor : ");
    i=0;
    while((ch=fgetc(stdin))!='\n'){
        if(ch=='1')
            div[i]=1;
        else    
            div[i]=0;
        i++;
    }
    divlen=i;
    for(i=datalen;i<datalen+divlen-1;i++)
        data[i]=0;
    datalen=datalen+divlen-1;
    for(i=0;i<divlen;i++){
        rem[i]=data[i];
        k=divlen-1;
    }
    while(k<datalen){
        if(rem[0]==1){
            for(i=0;i<divlen;i++)
                rem[i]=rem[i]^div[i];
        }
        else{
            if(k==datalen-1)
                break;
            for(i=0;i<divlen-1;i++){
                rem[i]=rem[i+1];
                printf("%d", rem[i]);
            }
            rem[i]=data[++k];
            printf("%d\n",rem[i]);
        }
    }   
    j=1;
    for(i=datalen-divlen+1;i<datalen;i++)
        data[i]=rem[j++];
    printf("\nThe data to be sent is\n");
    for(i=0;i<datalen;i++)
        printf("%d",data[i]);
    return 0;
}

---------------------------------------------------------------------------

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#define NOF_PACKETS 10

int Rand(int a){
    int rn=(rand()%10)%a;
    return rn==0?1:rn;
}

int main(){
    int packet_sz[NOF_PACKETS],i,clk,b_size,o_rate,p_sz_rm=0,p_time,op;
    for(i=0;i<NOF_PACKETS;++i)
        packet_sz[i]=Rand(6);
    for(i=0;i<NOF_PACKETS;++i)
        printf("\npacket[%d] : %d bytes\t", i, packet_sz[i]);
    printf("\nEnter the output rate : ");
    scanf("%d", &o_rate);
    printf("Enter the bucket size : ");
    scanf("%d", &b_size);
    for(i=0;i<NOF_PACKETS;++i){
        if((packet_sz[i]+p_sz_rm)>b_size)
            if(packet_sz[i]>b_size)
                printf("\n\nIncoming packet size(%d bytes) is greater than bucket capacity(%d bytes) - PACKET REJECTED", packet_sz[i], b_size);
            else
                printf("\n\nBucket capacity exceeded - PACKETS REJECTED!!");
        else{
            p_sz_rm+=packet_sz[i];
            printf("\n\nIncoming packet size : %d\n",packet_sz[i]);
            printf("Bytes remaining to transmit : %d", p_sz_rm);
            p_time=Rand(4);
            printf("\nTime left for transmission : %d units", p_time);
            for(clk=10;clk<=p_time;clk+=10){
                sleep(1);
                if(p_sz_rm){
                    if(p_sz_rm<=o_rate)
                        op=p_sz_rm,p_sz_rm=0;
                    else    
                        op=o_rate,p_sz_rm-=o_rate;
                    printf("\nPacket of size %d transmitted", op);
                    printf("----Bytes remaining to transmit: %d", p_sz_rm);
                }
                else{
                    printf("\nTime left for transmission : %d units", p_time-clk);
                    printf("\nNo packets to transmit!!");
                }
            }
        }
    }
}




